<txs type="P2PKH">
	<raw bits="32" desc="1. version">01000000</raw>
	<raw bits="8" desc="2. varint specifying the number of inputs"></raw>
	<txin>
		<raw bits="256" id="" desc="3. transaction id from which we want to redeem an output (reverse order of @id)"></raw>
		<outputs>
			<output address="" value="" desc="(provide BTC address and decimal value in satoshis)">
				<raw bits="32" desc="4. output index we want to redeem from the transaction"></raw>
				<raw bits="8" nullvalue="00" desc="5. For the purpose of signing the transaction, length of scriptPubKey of the outpoint. After signing, length of sigscript">19</raw>
				<pkscript>
					<raw bits="8" desc="OP_DUP">76</raw>
					<raw bits="8" desc="OP_HASH160">a9</raw>
					<raw bits="8" desc="push 0x14 bytes">14</raw>
					<raw bits="160" desc="(pubkeyhash)"></raw>
					<raw bits="8" desc="OP_EQUALVERIFY">88</raw>
					<raw bits="8" desc="OP_CHECKSIG">ac</raw>
				</pkscript>
				<raw bits="32" desc="7. sequence. This is currently always set to 0xffffffff">ffffffff</raw>
			</output>
		</outputs>
	</txin>
	<txout>
		<outputs>
			<raw bits="8" desc="8. varint containing the number of outputs in our new transaction"></raw>
			<output address="" value="" desc="(provide BTC address and decimal value in satoshis)">
				<raw bits="64" desc="9. (64 bit integer, little-endian) amount (in satoshis) we want to redeem from the specified outputs for this recipient address"></raw>
				<raw bits="8" desc="10. length of the output script (0x19)">19</raw>
				<pkscript>
					<raw bits="8" desc="11. (OP_DUP)">76</raw>
					<raw bits="8" desc="11. (OP_HASH160)">a9</raw>
					<raw bits="8" desc="11. (push hex 0x14 bytes on stack)">14</raw>
					<raw bits="160" desc="11. Then we write the pubkeyhash of the recipient"></raw>
					<raw bits="8" desc="11. (OP_EQUALVERIFY)">88</raw>
					<raw bits="8" desc="11. (OP_CHECKSIG)">ac</raw>
				</pkscript>
			</output>
			<raw bits="32" desc="12. lock time">00000000</raw>
			<raw iteration="1" bits="32" desc="13. Iteration 1: hash code type / Iteration 2: We finish off by removing the four-byte hash code type we added in step 13">01000000</raw>
		</outputs>
	</txout>
	<template>
		<sigscript desc="14. double-SHA256 hash this entire structure (from iteration 1). This will be the input to the signing.">
			<raw bits="8" desc="16. OPCODE containing the length of the DER-encoded signature plus the one-byte hash code type"/>
			<raw bits="?" desc="15. create ECDSA signature"/>
			<raw bits="8" desc="16. hash code type (SIGHASH_ALL)">01</raw>
			<raw bits="8" desc="16. OPCODE containing the length of the public key of signer"/>
			<raw bits="264-520" desc="16. public key of signer"/>
		</sigscript>
	</template>
</txs>
